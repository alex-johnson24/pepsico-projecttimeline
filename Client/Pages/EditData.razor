@namespace PepsiCoProjectTimeline.Client.Pages
@inject HttpClient Http
@inject NavigationManager NavigationManager
@page "/edit"
@using System.Globalization
@using System.Net.Http.Json
@using PepsiCoProjectTimeline.Shared.Models

<h1>Project Timeline Tasks</h1>
@if (projectTasks == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <!-- Data Table -->
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Responsible Group</th>
                <th>Task Name</th>
                <th>Project Manager</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Percent Completion</th>
                <th>Milestone Type</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in projectTasks!)
            {
                <tr>
                    <td>@item.ResponsibleGroup</td>
                    <td>@item.TaskName</td>
                    <td>
                        <a href="mailto:@item.ProjectManagerEmail">@item.ProjectManager</a>
                    </td>
                    <td>@item.StartDate.ToString("yyyy-MM-dd")</td>
                    <td>@item.EndDate.ToString("yyyy-MM-dd")</td>
                    <td>@(item.PercentCompletion * 100)%</td>
                    <td>@(item.MilestoneType ?? "--")</td>
                    <td>
                        <button class="btn btn-primary btn-sm" @onclick="() => OpenEditModal(item.Id)"><span id="editIcon" class="oi oi-pencil"
                                aria-hidden="true"></span></button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Edit Modal -->
    <div class="modal fade @_modalClass" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true" aria-modal="true"
        style="display: @_modalDisplay">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editModalLabel">Edit Data</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="editingTask" OnValidSubmit=@HandleValidSubmit>
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="mb-3">
                            <label for="editResponsibleGroup" class="form-label">Responsible Group</label>
                            <InputText id="editResponsibleGroup" class="form-control"
                                @bind-Value="editingTask.ResponsibleGroup" />
                        </div>
                        <div class="mb-3">
                            <label for="editTaskName" class="form-label">Task Name</label>
                            <InputText id="editTaskName" class="form-control" @bind-Value="editingTask.TaskName" />
                        </div>
                        <div class="mb-3">
                            <label for="editProjectManager" class="form-label">Project Manager</label>
                            <InputText id="editProjectManager" class="form-control"
                                @bind-Value="editingTask.ProjectManager" />
                        </div>
                        <div class="mb-3">
                            <label for="editMilestoneType" class="form-label">Contact Email</label>
                            <InputText id="editMilestoneType" class="form-control"
                                @bind-Value="editingTask.ProjectManagerEmail" />
                        </div>
                        <div class="mb-3">
                            <label for="editStartDate" class="form-label">Start Date</label>
                            <InputDate id="editStartDate" class="form-control" @bind-Value="editingTask.StartDate" />
                        </div>
                        <div class="mb-3">
                            <label for="editEndDate" class="form-label">End Date</label>
                            <InputDate id="editEndDate" class="form-control" @bind-Value="editingTask.EndDate" />
                        </div>
                        <div class="mb-3">
                            <label for="editMilestoneType" class="form-label">Summary</label>
                            <InputNumber id="editMilestoneType" class="form-control"
                                @bind-Value="editingTask.PercentCompletion" />
                        </div>
                        <div class="mb-3">
                            <label for="editMilestoneType" class="form-label">Summary</label>
                            <InputText id="editMilestoneType" class="form-control"
                                @bind-Value="editingTask.MilestoneType" />
                        </div>
                        <button type="submit" class="btn btn-primary">Save changes</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>

    @if (_modalBackdrop)
    {
        <div class="modal-backdrop fade show"></div>
    }

}

@code {
    private List<ProjectTimelineModel>? projectTasks;
    private ProjectTimelineModel editingTask { get; set; } = new();
    private string _modalDisplay { get; set; } = "none";
    private string _modalClass { get; set; } = "";
    private bool _modalBackdrop { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        projectTasks = await GetAllTasks();
    }

    private async Task<List<ProjectTimelineModel>> GetAllTasks()
    {
        var data = await Http.GetFromJsonAsync<List<ProjectTimelineModel>>("api/ProjectTimeline/all-tasks");
        return data ?? new();
    }

    private async Task OpenEditModal(int projectId)
    {
        Console.WriteLine("Clicked button?");
        editingTask = projectTasks!.First(f => f.Id == projectId);
        _modalDisplay = "block;";
        await Task.Delay(100);
        _modalClass = "show";
        _modalBackdrop = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task CloseModal()
    {
        _modalDisplay = "none;";
        await Task.Delay(100);
        _modalClass = "";
        _modalBackdrop = false;
        await GetAllTasks();
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleValidSubmit(EditContext editContext)
    {
        if (editContext?.Model is not ProjectTimelineModel toUpdate) return;

        await Http.PutAsJsonAsync($"api/ProjectTimeline/update/{toUpdate.Id}", toUpdate);
        await CloseModal();
    }
}